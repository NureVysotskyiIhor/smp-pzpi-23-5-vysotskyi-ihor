#!/bin/bash

# Функція для відображення довідки
show_help() {
    echo "Використання: $0 [--help | --version] | [[-q|--quiet] [назва_групи] вхідний_файл.csv]"
    echo ""
    echo "Опції:"
    echo "  --help              Показати цю довідку"
    echo "  --version           Показати версію скрипта"
    echo "  -q, --quiet         Приглушити вивід у стандартний потік"
    echo ""
    echo "Параметри:"
    echo "  назва_групи         Назва академічної групи (наприклад, ПЗПІ-23-12)"
    echo "  вхідний_файл.csv    CSV-файл з розкладом занять"
    exit 0
}

# Функція для відображення версії
show_version() {
    echo "Версія скрипта: 2.0"
    exit 0
}

# Ініціалізація змінних
quiet_mode=0
group_name=""
input_csv=""

# Обробка аргументів командного рядка
while [[ $# -gt 0 ]]; do
    case $1 in
        --help)
            show_help
            ;;
        --version)
            show_version
            ;;
        -q|--quiet)
            quiet_mode=1
            shift
            ;;
        *)
            if [[ -z $group_name ]]; then
                group_name=$1
            elif [[ -z $input_csv ]]; then
                input_csv=$1
            else
                echo "Помилка: надлишкові аргументи" >&2
                exit 1
            fi
            shift
            ;;
    esac
done

# Вибір файлу, якщо не вказано
if [[ -z $input_csv ]]; then
    available_files=$(ls TimeTable_??_??_20??.csv 2>/dev/null | sort)
    if [[ -z $available_files ]]; then
        echo "Помилка: не знайдено файлів формату TimeTable_??_??_20??.csv" >&2
        exit 1
    fi
    echo "Оберіть файл:"
    select input_csv in $available_files; do
        if [[ -n $input_csv ]]; then
            break
        else
            echo "Некоректний вибір. Спробуйте ще раз."
        fi
    done
fi

# Перевірка доступності файлу
if [[ ! -r $input_csv ]]; then
    echo "Помилка: файл недоступний для читання: $input_csv" >&2
    exit 1
fi

# Конвертація кодування та очищення файлу
temp_utf8=$(mktemp)
iconv -f WINDOWS-1251 -t UTF-8 "$input_csv" | tr -d '\r' > "$temp_utf8" || {
    echo "Помилка: не вдалося конвертувати кодування файлу" >&2
    rm "$temp_utf8"
    exit 1
}

# Отримання списку груп після "DL"
groups=($(iconv -f WINDOWS-1251 -t UTF-8 "$input_csv" 2>/dev/null | tr '\r' '\n' | awk -F'","' '
    NR > 1 {
        if (match($0, /[A-Za-zА-Яа-яіїєґІЇЄҐ]+-[0-9]{2}-[0-9]{1,2}/)) {
            group = substr($0, RSTART, RLENGTH);
            print group;
        }
    }
' | sort | uniq))

group_count=${#groups[@]}

if [[ $group_count -eq 0 ]]; then
    echo "Помилка: у файлі не знайдено жодної групи" >&2
    rm "$temp_utf8"
    exit 1
fi

# Вибір групи, якщо не вказано або не знайдено
if [[ -z "$group_name" || ! " ${groups[@]} " =~ " $group_name " ]]; then
    if [[ $group_count -eq 1 ]]; then
        group_name="${groups[0]}"
        echo "Використовується єдина знайдена група: $group_name" >&2
    else
        if [[ -n "$group_name" ]]; then
            echo "Помилка: вказана група '$group_name' не знайдена у файлі." >&2
        fi
        echo "Доступні групи:"
        for group in "${groups[@]}"; do
            echo "$group"
        done
        echo "Оберіть групу:"
        select group_name in "${groups[@]}"; do
            if [[ -n "$group_name" ]]; then
                break
            else
                echo "Некоректний вибір. Спробуйте ще раз."
            fi
        done
    fi
fi

# Формування імені вихідного файлу
date_segment=$(echo "$input_csv" | sed 's/TimeTable_\(.*\).csv/\1/')
output_csv="Google_TimeTable_${date_segment}.csv"

# Повідомлення про обробку
if [[ $quiet_mode -eq 0 ]]; then
    echo "Обробка записів для групи: $group_name"
fi

# Фільтрація записів для вибраної групи
temp_filtered=$(mktemp)
if [[ $group_count -eq 1 ]]; then
    grep -o "\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\"" "$temp_utf8" > "$temp_filtered"
else
    grep -o "\"$group_name - [^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\",\"[^\"]*\"" "$temp_utf8" > "$temp_filtered"
fi

# Сортування записів за датою
temp_sorted=$(mktemp)
awk -F'"' '
    $4 !~ /\/Дата\*\// && $2 !~ /Тема/ && $4 != "" {
        split($4, date_parts, ".")
        sort_date = sprintf("%04d%02d%02d", date_parts[3], date_parts[2], date_parts[1])
        print sort_date "|" $6 "|" $0
    }
' "$temp_filtered" | sort > "$temp_sorted"

# Запис заголовку у вихідний файл
echo "Subject,Start Date,Start Time,End Date,End Time,Description" > "$output_csv"

# Обробка та форматування записів
awk -F'|' '
    function to_12h(time_24h) {
        split(time_24h, parts, ":")
        hour = parts[1] + 0
        minute = parts[2]
        if(hour == 0) {
            hour = 12
            ampm = "AM"
        } else if(hour == 12) {
            ampm = "PM"
        } else if(hour > 12) {
            hour = hour - 12
            ampm = "PM"
        } else {
            ampm = "AM"
        }
        return hour ":" minute " " ampm
    }
    {
        line = $3
        split(line, fields, "\"")
        subject = fields[2]
        start_date = fields[4]
        start_time = fields[6]
        end_date = fields[8]
        end_time = fields[10]
        clean_subject = subject
        gsub(/^[А-ЯІЇЄа-яіїє0-9-]+ - /, "", clean_subject)
        if(clean_subject ~ /Лб/) {
            type = "Лб"
            key_subject = clean_subject
            gsub(/ DL.*/, "", key_subject)
            key = key_subject "_" type "_" start_date
        } else if(clean_subject ~ /Пз/) {
            type = "Пз"
            key_subject = clean_subject
            gsub(/ DL.*/, "", key_subject)
            key = key_subject "_" type
        } else {
            type = "Лк"
            key_subject = clean_subject
            gsub(/ DL.*/, "", key_subject)
            key = key_subject "_" type
        }
        if(key in lesson_counters) {
            if(type != "Лб") {
                lesson_counters[key]++
            }
        } else {
            if(type == "Лб") {
                max_num = 0
                for(k in lesson_counters) {
                    if(index(k, key_subject "_" type "_") == 1) {
                        if(lesson_counters[k] > max_num) {
                            max_num = lesson_counters[k]
                        }
                    }
                }
                lesson_counters[key] = max_num + 1
            } else {
                lesson_counters[key] = 1
            }
        }
        lesson_number = lesson_counters[key]
        split(start_date, sd_parts, ".")
        split(end_date, ed_parts, ".")
        formatted_start_date = sd_parts[2] "/" sd_parts[1] "/" sd_parts[3]
        formatted_end_date = ed_parts[2] "/" ed_parts[1] "/" ed_parts[3]
        formatted_start_time = to_12h(start_time)
        formatted_end_time = to_12h(end_time)
        subject_output = clean_subject "; №" lesson_number
        description = clean_subject
        record = "\"" subject_output "\",\"" formatted_start_date "\",\"" formatted_start_time "\",\"" formatted_end_date "\",\"" formatted_end_time "\",\"" description "\""
        print record
    }
' "$temp_sorted" >> "$output_csv"

# Очищення тимчасових файлів
rm "$temp_filtered" "$temp_sorted" "$temp_utf8"

# Вивід результату, якщо не в тихому режимі
if [[ $quiet_mode -eq 0 ]]; then
    cat "$output_csv"
fi
