
МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ






Звіт
з практичної роботи № 1
з дисципліни
«Скриптові мови програмування»









Виконав:	Перевірив:
ст. гр. ПЗПІ-23-5	ст. викладач кафедри ПІ
Висоцький І. О.	Сокорчук Ігор Петрович












2025
 
1 ІСТОРІЯ ЗМІН
№	Дата	Версія звіту	Опис змін та виправлень
1	20.05.2025	0.1	Створено розділ “Історія Змін”

   
2 ЗАВДАННЯ
    Написатати Bash скрипт, який друкуватиме на екрані ялинку із двох ярусів гілок, стовбура та шару снігу.      Наприклад таку:           *           ###         *****       #######     *********           ###         *****       #######     *********          ###          ###   ***********        Ялинка повинна бути симетричною.      Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#» наприклад як такий:        *        ###      *****    #######         Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.      Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.      Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.      Параметри скрипта повинні мати додатнє значення.      Вказані значення повинні округлятися до потрібних у меншу сторону.      Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.      У скрипті потрібно обовʼязково використати такі конструкції: if ... then ... fi   while ... do ... done   until ... do ... done   for ... in .. do ... done   for ((...)); do ... done        У скрипті також потрібно використати функцію.        Ім’я скрипта: ~/{імʼя-облікового-запису}-task1
     Приклад виклику скрипта: ~/pzpiz-26-7-shukhevych-roman-task1 16 11
     Файл скрипта повинен бути виконуваним файлом для усіх користуачів системи.
     Право редагувати файл скрипта повинен мати лише власник скрипта.
 
3 ОПИС ВИКОНАНОЇ РОБОТИ
Розробити Bash-скрипт призначений для генерації зображення ялинки в текстовому форматі з урахуванням заданих параметрів висоти дерева та ширини снігу. 
Перевірка вхідних параметрів (рядки 30–49) наведена в додатку В.1 перевіряє правильність переданих аргументів: На початку скрипта здійснюється валідація аргументів командного рядка:
	Має бути передано два аргументи — висота та ширина (if (( $# != 2 )), рядок 20);
	Обидва значення повинні бути додатними цілими числами;
	Мінімальні значення — 7 (if ((heightInput < 7 || widthInput < 7)), рядок 30);
	Ширина коригується на непарне число (((widthInput % 2 == 0)) && ((widthInput--)), рядок 28);
	Ширина має відповідати формулі максимальної ширини дерева (deriveMaxWidth, рядки 36–38);
Функція renderLayer (рядки 5–29) наведено в додатку В.2 будує один шар ялинки з поступовим розширенням символів у вигляді рівнобедреного трикутника. Висота шару передається як параметр $1, початкова ширина $2, повна ширина — $3, а символ — $4. Символи # та * чергуються кожен рядок. Центрування досягається через printf "%*s".
Визначення параметрів дерева (рядки 64–74) наведено в додатку В.3 Загальна кількість ярусів визначається динамічно на основі введених параметрів. Висота для верхівки фіксована (fixedTop=4), а для гілок обчислюється як кратна парній кількості шарів (segmentHeight=$((2 * layerHeight))).
Малювання верхівки (рядки 75-76) центрована верхівка * друкується перед ярусами дерева:
75.	starPos=$(((widthInput - 1) / 2))
76.	printf "%*s*\n" "$starPos" ""
Малювання ярусів дерева (рядки 78–87) кількість шарів визначається змінною totalLayers. Кожен ярус складається з двох викликів renderLayer для створення симетричної структури:
78.	activeChar="#"
79.	count=0
80.	while ((count < totalLayers)); do
81.	renderLayer "$layerHeight" 3 "$widthInput" "$activeChar"
82.	activeChar="$toggleChar"
83.	renderLayer "$layerHeight" 3 "$widthInput" "$activeChar"
84.	activeChar="$toggleChar"
85.	((count++))
86.	done
Малювання стовбура та снігу (рядки 88–98) стовбур представлений двома рядками з ###, центрованими відносно ширини. Сніг — останній рядок з *, що дорівнює ширині дерева.
88.	trunk=0
89.	while ((trunk < 2)); do
90.	margin=$(((widthInput - 3) / 2))
91.	printf "%*s###\n" "$margin" ""
92.	((trunk++))
93.	done

94.	for ((x = 0; x < widthInput; x++)); do
95.	printf "*"
96.	done

В цьому коді: У скрипті застосовуються такі ключові частини:
•	Функція renderLayer (рядки 5–29):
Будує один ярус дерева, що розширюється з кожним рядком. Символи # та * чергуються почергово для створення декоративного ефекту.
Центрування реалізовано через обчислення відступу (indent) і printf "%*s".
•	Обчислення параметрів ялинки (рядки 41–52):
На основі висоти та ширини обчислюється:
o	layerHeight — висота одного підярусу;
o	segmentHeight — повна висота одного повноцінного ярусу;
o	totalLayers — скільки таких ярусів поміститься після верхівки.
•	Малювання верхівки (рядок 75–76):
* у центрі екрану — умовна "зірка" дерева.
•	Малювання гілок (ярусів) (рядки 78–87):
Виконується цикл, що двічі викликає renderLayer для кожного ярусу, чергуючи символи # і *.
•	Стовбур та сніг (рядки 88–98):
Стовбур малюється символами ###, центрованими по ширині.
Останній рядок — ряд зірочок *, що імітує сніг.
Результат виконання коду при введені некоректної кількості параметрів наведено на рис. Б.1, результат роботи коду при некоректно введених значення параметрів наведено на рис. Б.2, результат виконання коду при введені коректних параметрів наведено на рис. Б.3.
 
4 ВИСНОВКИ

У результаті виконання завдання було створено Bash-скрипт, що відповідає поставленим вимогам:
1.	Будує симетричну ялинку з верхівкою, гілками, стовбуром і снігом;
2.	Враховує передані параметри висоти і ширини та проводить їх валідацію;
3.	Реалізує повторне чергування символів # і * для естетичного оформлення;
4.	Використовує конструкції Bash: until, while, for, функції, арифметику.
 
ДОДАТОК А
ВІДЕОЗАПИС
https://youtu.be/bchyzg-uC8c
Хронологічний опис відеозапису:
00:00 - Вітання та завдання
00:17 - Початок скрипту
00:36 - Функція побудови одного ярусу ялинки
01:54 - Перевірка кількості аргументів
02:15 - Зчитування аргументів і перевірка значень
03:25 - Перевірка максимально допустимої ширини дерева
04:23 - Розрахунок кількості ярусів
05:06 - Виведення верхівки дерева
05:21 - Побудова гілок дерева
06:09 - Малювання стовбура
06:22 - Додавання снігу
06:22 - Демонстрация роботи скрипту
ДОДАТОК Б
Графічні матеріали:
   Рисунок Б.1 — Результат роботи коду при введенні некоректної кількості параметрів    Рисунок Б.2 — Результат роботи коду при введенні некоректних значень параметрів    Рисунок Б.3 — Результа роботи коду при коректних параметрах 
  
ДОДАТОК В
Програмний код В.1 {pzpi-23-5-vysotskyi-ihor-task1} GitHub https://github.com/NureVysotskyiIhor/smp-pzpi-23-5-vysotskyi-ihor/blob/main/Pract1/smp-pzpi-23-5-vysotskyi-ihor-pract1-code/pzpi-23-5-vysotskyi-ihor-task1 
38.	if ! [[ $heightInput =~ ^[0-9]+$ && $widthInput =~ ^[0-9]+$ ]] || ((heightInput < 1 || widthInput < 1)); then
39.	    echo "Помилка: аргументи повинні бути додатніми цілими числами." >&2
40.	    exit 1
41.	fi
42.	
43.	((widthInput % 2 == 0)) && ((widthInput--))
44.	
45.	if ((heightInput < 7 || widthInput < 7)); then
46.	    echo "Помилка: мінімальні значення — 7 для обох параметрів." >&2
47.	    exit 1
48.	fi
 В.2 {pzpi-23-5-vysotskyi-ihor-task1} GitHub https://github.com/NureVysotskyiIhor/smp-pzpi-23-5-vysotskyi-ihor/blob/main/Pract1/smp-pzpi-23-5-vysotskyi-ihor-pract1-code/pzpi-23-5-vysotskyi-ihor-task1 
49.	renderLayer() { 

50.	local height=$1
51.	local startWidth=$2
52.	local totalWidth=$3
53.	local char=$4
54.	local line=0

55.	until (( line >= height )); do
1.	local width=$((startWidth + line * 2))
2.	local indent=$(((totalWidth - width) / 2))
3.	printf "%*s" "$indent" ""
4.	printf "%${width}s\n" "" | tr " " "$char"

5.	if [[ "$char" == "#" ]]; then
6.	char="*"
7.	else
8.	char="#"
9.	fi

10.	((line++))
56.	done

57.	toggleChar="$char"
58.	}

В.3 {pzpi-23-5-vysotskyi-ihor-task1} GitHub репозиторій: https://github.com/NureVysotskyiIhor/smp-pzpi-23-5-vysotskyi-ihor/blob/main/Pract1/smp-pzpi-23-5-vysotskyi-ihor-pract1-code/pzpi-23-5-vysotskyi-ihor-task1 
65.	layerHeight=$(((usableWidth - 1) / 2))
66.	fixedTop=4
67.	variableHeight=$((heightInput - fixedTop))
68.	segmentHeight=$((2 * layerHeight))
69.	totalLayers=$((variableHeight / segmentHeight))

70.	((totalLayers < 1)) && {
71.	echo "Висоти недостатньо для хоча б одного ярусу." >&2
72.	exit 1
73.	}



